import { initializeApp } from "https://www.gstatic.com/firebasejs/10.8.1/firebase-app.js";
import { getAuth }        from "https://www.gstatic.com/firebasejs/10.8.1/firebase-auth.js";
import { getFirestore, collection, addDoc, serverTimestamp } from "https://www.gstatic.com/firebasejs/10.8.1/firebase-firestore.js";
let latestRawItineraryText = "";
const firebaseConfig = {
    apiKey: "AIzaSyDyIGwUGgnoVIPXe4HINkYhZzYOT_B8xzo",
    authDomain: "aibe-3.firebaseapp.com",
    projectId: "aibe-3",
    storageBucket: "aibe-3.firebasestorage.app",
    messagingSenderId: "303637126000",
    appId: "1:303637126000:web:d9d568d321334eeffa8db5",
    measurementId: "G-SY2NP4BGFC"
  };
  const app  = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const db   = getFirestore(app);

document.getElementById('ai-smart-recommend-btn').addEventListener('click', async () => {
    const minBudget = document.querySelector('[name="minBudget"]').value;
    const maxBudget = document.querySelector('[name="maxBudget"]').value;
    const days = document.querySelector('[name="days"]').value;
    const countryCode = document.querySelector('[name="country"]').value;
    const travelStyle = document.querySelector('[name="travelStyle"]').value;
    const interests = document.querySelector('[name="interests"]').value;
    const region = document.querySelector('[name="region"]').value;
   
  
    if (!minBudget || !maxBudget || !days) {
      alert("ÏòàÏÇ∞Í≥º Ïó¨Ìñâ ÏùºÏàòÎ•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }
  
    const countryMap = {
      KR: "ÎåÄÌïúÎØºÍµ≠",
      JP: "ÏùºÎ≥∏",
      FR: "ÌîÑÎûëÏä§",
      US: "ÎØ∏Íµ≠",
      IT: "Ïù¥ÌÉàÎ¶¨ÏïÑ"
    };
  
    const countryName = countryMap[countryCode] || "Ï∂îÏ≤ú Íµ≠Í∞Ä";
  
    const prompt = `
    ÎÇòÎäî ${days}Ïùº ÎèôÏïà ${countryName}ÏúºÎ°ú Ïó¨ÌñâÏùÑ Í∞à Í±∞Ïïº.
    Ïó¨Ìñâ ÏßÄÏó≠ÏùÄ Î∞òÎìúÏãú **${region} Ï§ëÏã¨**ÏúºÎ°úÎßå Ï∂îÏ≤úÌï¥Ï§ò.
    Ï¥ù ÏòàÏÇ∞ÏùÄ ${minBudget}~${maxBudget} Îã¨Îü¨Ïïº.
    Ïó¨Ìñâ Ïä§ÌÉÄÏùºÏùÄ ${travelStyle} Ïä§ÌÉÄÏùºÏùÑ ÏÑ†Ìò∏ÌïòÍ≥†,
    ÎÇ¥Í∞Ä ÌäπÌûà Í¥ÄÏã¨ ÏûàÎäî ÌôúÎèôÏùÄ ${interests}Ïïº.
    
    ÌïòÎ£® Îã®ÏúÑÎ°ú ÏïÑÏπ®, Ï†êÏã¨, Ïò§ÌõÑ, Ï†ÄÎÖÅ, ÏàôÏÜå ÏùºÏ†ïÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Ï∂îÏ≤úÌï¥Ï§ò.
    
    Í∞Å ÏùºÏ†ïÎßàÎã§ Îã§Ïùå Ï†ïÎ≥¥Î•º Î∞òÎìúÏãú Ìè¨Ìï®Ìï¥Ï§ò:
    - Ïû•ÏÜå Ïù¥Î¶Ñ ÎòêÎäî ÏãùÎãπ Ïù¥Î¶Ñ (Íµ¨Í∏ÄÎßµÏóêÏÑú Í≤ÄÏÉâÎêòÎäî Ïã§Ï†ú Ïû•ÏÜå Ïù¥Î¶ÑÏúºÎ°úÎßå! Î∞òÎìúÏãú Ï°¥Ïû¨ÌïòÎäî Ïû•ÏÜåÏó¨Ïïº Ìï¥)
    - Í∞ÑÎã®Ìïú ÏÑ§Î™Ö (Ïôú Ï∂îÏ≤úÌïòÎäîÏßÄ)
    - ÏòàÏÉÅ ÎπÑÏö© (Îã¨Îü¨ Í∏∞Ï§Ä)
    - Î∞òÎìúÏãú ${region} ÏßÄÏó≠ Ï§ëÏã¨Ïù¥Ïñ¥Ïïº ÌïòÎ©∞, ÏßÄÏó≠ Ïô∏ Ïû•ÏÜåÎäî Ìè¨Ìï®ÌïòÏßÄ Îßà
    - Í∑∏Î¶¨Í≥† ÏµúÏ†ÅÏùò ÎèôÏÑ†ÏúºÎ°ú Ï∂îÏ≤úÌï¥Ï§ò 
    ÌäπÌûà ÏàôÏÜåÎäî Îß§Ïùº Ìè¨Ìï®ÌïòÍ≥†, **ÏàôÏÜå Ïù¥Î¶ÑÏùÑ Î∞òÎìúÏãú Î™ÖÏãú**Ìï¥. ÏàôÏÜå Ïù¥Î¶ÑÏù¥ Í∞ôÏïÑÎèÑ ÏÉùÎûµÌïòÏßÄ Îßà.  
    ÏàôÏÜå Ïù¥Î¶ÑÎèÑ Íµ¨Í∏ÄÎßµÏóêÏÑú Í≤ÄÏÉâ Í∞ÄÎä•Ìïú Ïã§Ï†ú Ïù¥Î¶ÑÏù¥Ïó¨Ïïº Ìï¥.
    ÎßàÏßÄÎßâ ÎÇ†ÏùÄ Í≥µÌï≠ÏúºÎ°ú Í∞ÄÏûñÏïÑ? Ïã§Ï†ú Í≥µÌï≠Ïù¥Ïó¨ÏïºÌï¥

    ÏïÑÎûò ÌòïÏãùÏùÑ Î∞òÎìúÏãú ÏßÄÏºúÏÑú ÏûëÏÑ±Ìï¥Ï§ò Î¨¥Ï°∞Í±¥ :
    
    Day 1:
    - Ïò§Ï†Ñ: [Ïû•ÏÜå Ïù¥Î¶Ñ] - [ÏÑ§Î™Ö] (ÏòàÏÉÅ ÎπÑÏö©: $XX)
    - Ï†êÏã¨: [ÏãùÎãπ Ïù¥Î¶Ñ] - [ÏÑ§Î™Ö] (ÏòàÏÉÅ ÎπÑÏö©: $XX)
    - Ïò§ÌõÑ: [Ïû•ÏÜå Ïù¥Î¶Ñ] - [ÏÑ§Î™Ö] (ÏòàÏÉÅ ÎπÑÏö©: $XX)
    - Ï†ÄÎÖÅ: [ÏãùÎãπ Ïù¥Î¶Ñ] - [ÏÑ§Î™Ö] (ÏòàÏÉÅ ÎπÑÏö©: $XX)
    - ÏàôÏÜå: [ÏàôÏÜå Ïù¥Î¶Ñ] - [ÏÑ§Î™Ö] (ÏòàÏÉÅ ÎπÑÏö©: $XX)
    - ÏùºÏùº Ï¥ù ÎπÑÏö©: $XXX
    
    Day 2:
    ...

    ÎßàÏßÄÎßâÎÇ†Ïóî Ïù¥ÎûòÏïºÌï¥

    - Ïò§Ï†Ñ: [Ïû•ÏÜå Ïù¥Î¶Ñ] - [ÏÑ§Î™Ö] (ÏòàÏÉÅ ÎπÑÏö©: $XX)
    - Ï†êÏã¨: [ÏãùÎãπ Ïù¥Î¶Ñ] - [ÏÑ§Î™Ö] (ÏòàÏÉÅ ÎπÑÏö©: $XX)
    - Í≥µÌï≠: [Í≥µÌï≠ Ïù¥Î¶Ñ] - [ÏÑ§Î™Ö] (ÏòàÏÉÅ ÎπÑÏö©: $XX)
    - ÏùºÏùº Ï¥ù ÎπÑÏö©: $XXX
    `;
  
    try {
      const response = await fetch("http://localhost:3000/gemini", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt })
      });
  
      const result = await response.json();
      const itineraryText = result.candidates?.[0]?.content?.parts?.[0]?.text;
      latestRawItineraryText = itineraryText;
  
      if (!itineraryText) {
        alert("AIÍ∞Ä ÏùºÏ†ïÏùÑ ÏÉùÏÑ±ÌïòÏßÄ Î™ªÌñàÏñ¥Ïöî üò¢");
        return;
      }
      const itinerary = parseGeminiItinerary(itineraryText);
      displayAiPanel(itinerary, region);
      document.getElementById("gemini-itinerary").innerText = itineraryText;
      document.getElementById("ai-panel").style.display = "block";
  
      
    } catch (err) {
      console.error("Gemini Ìò∏Ï∂ú Ïò§Î•ò:", err);
      alert("ÏùºÏ†ï ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî.");
    }
  });
  
 

  let aiMap;
  function initAiMap(center = { lat: 35.6895, lng: 139.6917 }) {
    aiMap = new google.maps.Map(document.getElementById("ai-map"), {
      center,
      zoom: 12
    });
  }
  
  function renderAiMarkers(places) {
    if (!aiMap) initAiMap();
  
    const bounds = new google.maps.LatLngBounds();
  
    places.forEach((place, index) => {
      const marker = new google.maps.Marker({
        position: { lat: place.lat, lng: place.lng },
        map: aiMap,
        label: `${index + 1}`,     // Ïà´Ïûê ÎùºÎ≤®
        title: place.name          // ÎßàÏö∞Ïä§ Ïò§Î≤ÑÏö©
      });
  
      const infoWindow = new google.maps.InfoWindow({
        content: `<strong>${index + 1}. ${place.name}</strong>`
      });
  
      marker.addListener('click', () => {
        infoWindow.open(aiMap, marker);
      });
  
      bounds.extend(marker.getPosition());
    });
  
    aiMap.fitBounds(bounds);
  }
  

  function parseGeminiItinerary(text) {
    const dayMatches = [...text.matchAll(/Day\s+(\d+):/g)];
    const result = [];
  
    for (let i = 0; i < dayMatches.length; i++) {
      const current = dayMatches[i];
      const next = dayMatches[i + 1];
  
      const startIdx = current.index + current[0].length;
      const endIdx = next ? next.index : text.length;
  
      const content = text.slice(startIdx, endIdx).trim();
  
      result.push({
        day: Number(current[1]),
        title: current[1],  // ex: "Day 3"
        content
      });
    }
  
    return result;
  }

  function displayAiPanel(itinerary, region) {
    const panel = document.getElementById("ai-panel");
    const btnBox = document.getElementById("ai-day-buttons");
    const listBox = document.getElementById("ai-itinerary-list");
    const mapBox = document.getElementById("ai-map");
  
    panel.style.display = "block";
    btnBox.innerHTML = "";
    listBox.innerHTML = "";
  
    itinerary.forEach(({ day, title, content }) => {
      const btn = document.createElement("button");
      btn.textContent = `Day ${day}`;
  
      btn.onclick = async () => {
        listBox.innerHTML = `
  <h3>Day${title}: </h3>
  <pre style="white-space: pre-wrap;">${content}</pre>
`;
  
        // 1Ô∏è‚É£ Ïû•ÏÜå Ïù¥Î¶Ñ ÎΩëÍ∏∞
        const placeNames = extractPlaceNamesFromItinerary([{ content }]);  // ÌïòÎ£®ÏπòÎßå ÎÑ£Ïùå
  
        // 2Ô∏è‚É£ Google MapsÏóêÏÑú Ï¢åÌëú ÏñªÍ∏∞
        const coords = await getPlaceCoordinates(placeNames, region);
  
        // 3Ô∏è‚É£ ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî
        initAiMap(coords.length > 0 ? coords[0] : { lat: 35.6895, lng: 139.6917 });
  
        // 4Ô∏è‚É£ ÎßàÏª§ Î†åÎçîÎßÅ
        renderAiMarkers(coords);
      };
  
      btnBox.appendChild(btn);
    });
  
    if (itinerary.length > 0) {
      btnBox.querySelector("button").click();
    }
  }
  


  function extractPlaceNamesFromItinerary(itinerary) {
    const placeNames = [];
  
    const regex = /-\s*(?:Ïò§Ï†Ñ|Ï†êÏã¨|Ïò§ÌõÑ|Ï†ÄÎÖÅ|ÏàôÏÜå|Í≥µÌï≠):\s*([^\-]+?)\s*-/g;
  
    itinerary.forEach(day => {
      const matches = [...day.content.matchAll(regex)];
      for (const match of matches) {
        const name = match[1].trim();
        if (name && !placeNames.includes(name)) {
          placeNames.push(name);
        }
      }
    });
  
    return placeNames;
  }

  async function getPlaceCoordinates(placeNames, region = '') {
    const proxy = 'http://localhost:8080/';
    const key = 'AIzaSyA5ueda7Qmq4m_agO069YgX82NkEhJCzRY';
    const results = [];
  
    // ‚úÖ ÏßÄÏó≠Î≥Ñ Ï§ëÏã¨ Ï¢åÌëú Ï†ïÏùò
    const regionCenterMap = {
      "Ïò§ÏÇ¨Ïπ¥": { lat: 34.6937, lng: 135.5023 },
      "ÎèÑÏøÑ": { lat: 35.6895, lng: 139.6917 },
      "ÍµêÌÜ†": { lat: 35.0116, lng: 135.7681 },
      "ÏÇøÌè¨Î°ú": { lat: 43.0618, lng: 141.3545 },
      "ÌååÎ¶¨": { lat: 48.8566, lng: 2.3522 },
      "Î°úÎßà": { lat: 41.9028, lng: 12.4964 },
      "Î∞ÄÎùºÎÖ∏": { lat: 45.4642, lng: 9.1900 },
      "Îâ¥Ïöï": { lat: 40.7128, lng: -74.0060 },
      "LA": { lat: 34.0522, lng: -118.2437 },
      "ÏÉåÌîÑÎûÄÏãúÏä§ÏΩî": { lat: 37.7749, lng: -122.4194 },
      "ÏÑúÏö∏": { lat: 37.5665, lng: 126.9780 },
      "Î∂ÄÏÇ∞": { lat: 35.1796, lng: 129.0756 },
      "Ï†úÏ£ºÎèÑ": { lat: 33.4996, lng: 126.5312 },
    };
  
    const center = regionCenterMap[region] || { lat: 35.6895, lng: 139.6917 };  // fallback: ÎèÑÏøÑ
  
    for (const name of placeNames) {
      const query = encodeURIComponent(name);
      const url = `${proxy}https://maps.googleapis.com/maps/api/place/textsearch/json?query=${query}&location=${center.lat},${center.lng}&radius=20000&key=${key}&language=ko`;
  
      try {
        const res = await fetch(url);
        const data = await res.json();
        if (data.status === 'OK' && data.results.length > 0) {
          const loc = data.results[0].geometry.location;
          results.push({ name, lat: loc.lat, lng: loc.lng });
        }
      } catch (err) {
        console.warn('Place fetch error for:', name, err);
      }
    }
  
    return results;
  }
  
const regionOptions = {
    JP: ["ÎèÑÏøÑ", "Ïò§ÏÇ¨Ïπ¥", "ÍµêÌÜ†", "ÏÇøÌè¨Î°ú"],
    FR: ["ÌååÎ¶¨", "ÎãàÏä§", "ÎßàÎ•¥ÏÑ∏Ïú†"],
    US: ["Îâ¥Ïöï", "LA", "ÏÉåÌîÑÎûÄÏãúÏä§ÏΩî"],
    IT: ["Î°úÎßà", "Î≤†ÎÑ§ÏπòÏïÑ", "Î∞ÄÎùºÎÖ∏"],
    KR: ["ÏÑúÏö∏", "Î∂ÄÏÇ∞", "Ï†úÏ£ºÎèÑ"]
  };
  
  document.getElementById("country-select").addEventListener("change", (e) => {
    const selected = e.target.value;
    const regionSelect = document.getElementById("region-select");
  
    regionSelect.innerHTML = `<option value="">ÏÑ†ÌÉù Ïïà Ìï®</option>`;
    if (regionOptions[selected]) {
      regionOptions[selected].forEach(region => {
        const opt = document.createElement("option");
        opt.value = region;
        opt.textContent = region;
        regionSelect.appendChild(opt);
      });
    }
  });




  function convertItineraryToFirestoreFormat(rawText, countryCode, displayName) {
    const days = [];
  
    // üîß ÏàòÏ†ïÎêú Ï†ïÍ∑úÏãù
    const dayBlocks = [...rawText.matchAll(
      /Day\s*:?[\s]*(\d+):\s*\n([\s\S]*?)(?=\nDay\s*:?[\s]*\d+:|\n- Ïò§Ï†Ñ:|\n\*\*Ï∞∏Í≥†|\Z)/g)];
  
    const typeMap = {
      "Ïò§Ï†Ñ": "Ïò§Ï†Ñ",
      "Ï†êÏã¨": "Ï†êÏã¨",
      "Ïò§ÌõÑ": "Ïò§ÌõÑ",
      "Ï†ÄÎÖÅ": "Ï†ÄÎÖÅ",
      "ÏàôÏÜå": "ÏàôÏÜå",
      "Í≥µÌï≠": "Í≥µÌï≠"
    };
  
    for (const [_, dayStr, content] of dayBlocks) {
      const places = [];
      const lines = content.trim().split('\n');
  
      for (const line of lines) {
        const match = line.match(/-\s*(Ïò§Ï†Ñ|Ï†êÏã¨|Ïò§ÌõÑ|Ï†ÄÎÖÅ|ÏàôÏÜå|Í≥µÌï≠):\s*\*{0,2}(.+?)\*{0,2}\s*-\s*(.*?)\s*\(ÏòàÏÉÅ ÎπÑÏö©:.*?\)/);
        if (match) {
          const [, timeSlot, name, description] = match;
          places.push({
            name: name.trim(),
            description: description.trim(),
            type: typeMap[timeSlot]
          });
        }
      }
  
      days.push({
        day: parseInt(dayStr),
        places
      });
    }
  
    return {
      country: countryCode,
      displayName,
      updatedAt: new Date().toISOString(),
      days
    };
  }
  
  


 
// ‚úèÔ∏è ÏùºÏ†ï Ï†ÄÏû• Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú
document.getElementById("save-itinerary-btn").addEventListener("click", async () => {
    const user = auth.currentUser;
    if (!user) {
      alert("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï¥Ïöî.");
      return;
    }
  
    const rawText = latestRawItineraryText;
    const countryCode = document.querySelector('[name="country"]').value;
    const displayName = prompt("ÏùºÏ†ï Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî (Ïòà: Ïò§ÏÇ¨Ïπ¥_ÎßõÏßëÌà¨Ïñ¥)");
  
    if (!displayName) {
      alert("ÏùºÏ†ï Ïù¥Î¶ÑÏùÄ ÌïÑÏàòÏòàÏöî!");
      return;
    }
  
    const docData = convertItineraryToFirestoreFormat(rawText, countryCode, displayName);
  
    try {
      await addDoc(collection(db, "users", user.uid, "itineraries"), docData);
      alert("‚úÖ ÏùºÏ†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏñ¥Ïöî!");
    } catch (err) {
      console.error("Firestore Ï†ÄÏû• Ïò§Î•ò:", err);
      alert("‚ùå ÏùºÏ†ï Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏñ¥Ïöî.");
    }
  });